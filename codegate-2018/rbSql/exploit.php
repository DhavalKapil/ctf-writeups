<?php

define("STR", chr(1), true);
define("ARR", chr(2), true);
error_reporting(-1);

function rbSql($cmd,$table,$query,$data=NULL){
	switch($cmd){
	case "create":
		$content = array($table,"../../rbSql/rbSql_".substr(md5(rand(10000000,100000000)),0,16),$query);
		return $content;
		break;

	case "select":
		/*
		  Error1 : Command not found
		  Error2 : Column not found
		  Error3 : Value not found
		  Error4 : Table name not found
		  Error5 : Column count is different
		  Error6 : table name duplicate
		*/
		$result = $data;
		$whereColumn = $query[0];
		$whereValue = $query[1];
		$countRow = count($result) - 3;
		$chk = 0;
		for($i=0;$i<count($result[2]);$i++){
			if(strtolower($result[2][$i]) === strtolower($whereColumn)){
				$chk = 1;
				break;
			}
		}
		if($chk == 0) var_dump("Error2");
		$chk = 0;
		var_dump($result);
		for($j=0;$j<$countRow;$j++){
			var_dump($result[$j+3]);
			if(strtolower($result[$j+3][$i]) === strtolower($whereValue)){
				$chk = 1;
				return $result[$j+3];
			}
		}
		if($chk == 0) var_dump("Error3");
		break;

	case "insert":
		$result = $data;
		if(count($result[2]) != count($query)) var_dump("Error5");
		$result[count($result)] = $query;
		return $result;
		break;

	default:
		var_dump("Error1");
		break;
	}
}

function rbParse($rawData){
	$parsed = array();
	$idx = 0;
	$pointer = 0;

	while(strlen($rawData)>$pointer){
		if($rawData[$pointer] == STR){
			$pointer++;
			$length = ord($rawData[$pointer]);
			$pointer++;
			$parsed[$idx] = substr($rawData,$pointer,$length);
			$pointer += $length;
		}
		elseif($rawData[$pointer] == ARR){
			$pointer++;
			$arrayCount = ord($rawData[$pointer]);
			$pointer++;
			for($i=0;$i<$arrayCount;$i++){
				if(substr($rawData,$pointer,1) == ARR){
					$pointer++;
					$arrayCount2 = ord($rawData[$pointer]);
					$pointer++;
					for($j=0;$j<$arrayCount2;$j++){
						$pointer++;
						$length = ord($rawData[$pointer]);
						$pointer++;
						$parsed[$idx][$i][$j] = substr($rawData,$pointer,$length);
						$pointer += $length;
					}
				}
				else{
					$pointer++;
					$length = ord(substr($rawData,$pointer,1));
					$pointer++;
					$parsed[$idx][$i] = substr($rawData,$pointer,$length);
					$pointer += $length;
				}
			}
		}
		$idx++;
		if($idx > 2048) break;
	}
	return $parsed[0];
}

function rbPack($data){
	$rawData = "";
	if(is_string($data)){
		$rawData .= STR . chr(strlen($data)) . $data;
	}
	elseif(is_array($data)){
		$rawData .= ARR . chr(count($data));
		for($idx=0;$idx<count($data);$idx++) $rawData .= rbPack($data[$idx]);
	}
	return $rawData;
}

function register($uid, $upw, $umail) {
	if(($uid) && ($upw) && ($umail)){
      if(strlen($uid) < 3) var_dump("id too short");
      if(strlen($uid) > 16) var_dump("id too long");
      if(!ctype_alnum($uid)) var_dump("id must be alnum!");
      if(strlen($umail) > 256) var_dump("email too long");
      $upw = md5($upw);
      $uip = "127.0.0.1";
      $table = rbSql("create","member_".$uid,["id","mail","pw","ip","lvl"]);
      $table = rbSql("insert","member_".$uid,[$uid,$umail,$upw,$uip,"1"], $table);
      return $table;
    }
}

function login($uid, $upw, $contents) {
	return rbSql("select","member_".$uid,["pw",md5($upw)], $contents);
}

// Simulating the login flow
$umail = STR . "\x20" . "1a1dc91c907325c69271ddf0c944bc72";
$umail .= STR . "\x01" . "b";
$umail .= STR . "\x01" . "2";
$umail .= str_repeat("z", 256 - strlen($umail));
$uid = "myid2";
$upw = "pass";

$table = register($uid, $upw, $umail);

// Storing and retreiving again from file
$contents = rbParse(rbPack($table));

$res = login($uid, $upw, $contents);

// Use the following umail while registering
// Rest process is same
var_dump(urlencode($umail));